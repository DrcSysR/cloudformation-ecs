#!/usr/bin/env bash

set -e
set -u
set -o pipefail

export PROVIDER=${PROVIDER:-"route53"}

function get_route53_zone_id {
    local NAME="$1"
    local ID=$(aws route53 list-hosted-zones-by-name --dns-name "${NAME}" --max-items 1 | jq -r ".HostedZones[].Id")
    echo "${ID#/hostedzone/}"
}

function startup_hook {
    :
}

function deploy_challenge {
    local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"

    echo "deploy_challenge called: ${DOMAIN}, ${TOKEN_FILENAME}, ${TOKEN_VALUE}"

    . /assume-role ${AWS_DNS_ACCOUNT_ID} ${AWS_ROLE} discard

    ZONE_ID=$(get_route53_zone_id ${ROUTE53_ZONE})

    ACTION=CREATE TYPE=TXT VALUE="\\\"${TOKEN_VALUE}\\\"" NAME="_acme-challenge.${DOMAIN}" envsubst < /route53-change-record-template.json > /tmp/change.json

    cat /tmp/change.json

    CHANGE_ID=$(aws route53 change-resource-record-sets --hosted-zone-id ${ZONE_ID} --change-batch file:///tmp/change.json | jq -r ".ChangeInfo.Id")
    CHANGE_STATUS="PENDING"

    while [[ "${CHANGE_STATUS}" == "PENDING" ]]; do
        sleep 30
        CHANGE_STATUS=$(aws route53 get-change --id "${CHANGE_ID}" | jq -r ".ChangeInfo.Status")
        echo $CHANGE_STATUS
    done

    # This hook is called once for every domain that needs to be
    # validated, including any alternative names you may have listed.
    #
    # Parameters:
    # - DOMAIN
    #   The domain name (CN or subject alternative name) being
    #   validated.
    # - TOKEN_FILENAME
    #   The name of the file containing the token to be served for HTTP
    #   validation. Should be served by your web server as
    #   /.well-known/acme-challenge/${TOKEN_FILENAME}.
    # - TOKEN_VALUE
    #   The token value that needs to be served for validation. For DNS
    #   validation, this is what you want to put in the _acme-challenge
    #   TXT record. For HTTP validation it is the value that is expected
    #   be found in the $TOKEN_FILENAME file.
}

function clean_challenge {
    local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"

    echo "clean_challenge called: ${DOMAIN}, ${TOKEN_FILENAME}, ${TOKEN_VALUE}"

    . /assume-role ${AWS_DNS_ACCOUNT_ID} ${AWS_ROLE} discard

    ZONE_ID=$(get_route53_zone_id ${ROUTE53_ZONE})

    ACTION=DELETE TYPE=TXT VALUE="\\\"${TOKEN_VALUE}\\\"" NAME="_acme-challenge.${DOMAIN}" envsubst < /route53-change-record-template.json > /tmp/change.json

    aws route53 change-resource-record-sets --hosted-zone-id ${ZONE_ID} --change-batch file:///tmp/change.json

    # This hook is called after attempting to validate each domain,
    # whether or not validation was successful. Here you can delete
    # files or DNS records that are no longer needed.
    #
    # The parameters are the same as for deploy_challenge.
}

function deploy_cert {
    local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" FULLCHAINFILE="${4}" CHAINFILE="${5}"

    echo "deploy_cert called: ${DOMAIN}, ${KEYFILE}, ${CERTFILE}, ${FULLCHAINFILE}, ${CHAINFILE}"

    . /assume-role ${AWS_DEV_ACCOUNT_ID} ${AWS_ROLE} discard

    # Upload new certificate and get its ARN
    data=$(aws iam upload-server-certificate --server-certificate-name "${DOMAIN}-$(date +%s)" --certificate-body file://${CERTFILE} --certificate-chain file://${CHAINFILE} --private-key file://${KEYFILE})
    new_cert_arn=$(echo "$data" | jq -r ".ServerCertificateMetadata.Arn")

    echo "New certificate: ${new_cert_arn}"

    sleep 60
    #aws iam list-server-certificates

    # Find load balancer and listener
    lb_arn=$(aws elbv2 describe-load-balancers | jq -r ".LoadBalancers[] | select(.LoadBalancerName == \"${LOAD_BALANCER_NAME}\") | .LoadBalancerArn")
    listener=$(aws elbv2 describe-listeners --load-balancer-arn ${lb_arn} | jq -r ".Listeners[] | select (.Protocol == \"HTTPS\")")

    if [[ "$listener" == "" ]]; then
        lb_tg_arn=$(aws elbv2 describe-target-groups | jq ".TargetGroups[] | select (.TargetGroupName == \"${TARGET_GROUP_NAME}\") | .TargetGroupArn")
        sleep 10
        listener=$(aws elbv2 create-listener --load-balancer-arn ${lb_arn} --protocol HTTPS --port 443 --certificates CertificateArn=${new_cert_arn} --ssl-policy ELBSecurityPolicy-2016-08 --default-actions Type=forward,TargetGroupArn=${lb_tg_arn})
        echo "New listener: ${listener}"

        new_listener_arn=$(echo "$listener" | jq -r ".Listeners[].ListenerArn")

        # api
        tg_arn=$(aws elbv2 describe-target-groups | jq ".TargetGroups[] | select (.TargetGroupName == \"${ENV_NAME}-api\") | .TargetGroupArn")
        aws elbv2 create-rule --listener-arn ${new_listener_arn} --priority 10 --conditions Field=path-pattern,Values='/api/*' --actions Type=forward,TargetGroupArn=${tg_arn}
        aws elbv2 create-rule --listener-arn ${new_listener_arn} --priority 20 --conditions Field=path-pattern,Values='/login/*' --actions Type=forward,TargetGroupArn=${tg_arn}
        aws elbv2 create-rule --listener-arn ${new_listener_arn} --priority 30 --conditions Field=path-pattern,Values='/link/*' --actions Type=forward,TargetGroupArn=${tg_arn}
        aws elbv2 create-rule --listener-arn ${new_listener_arn} --priority 40 --conditions Field=path-pattern,Values='/explorer/*' --actions Type=forward,TargetGroupArn=${tg_arn}

        # ui
        tg_arn=$(aws elbv2 describe-target-groups | jq ".TargetGroups[] | select (.TargetGroupName == \"${ENV_NAME}-ui\") | .TargetGroupArn")
        aws elbv2 create-rule --listener-arn ${new_listener_arn} --priority 100 --conditions Field=path-pattern,Values='/*' --actions Type=forward,TargetGroupArn=${tg_arn}

        exit 0
    fi

    listener_arn=$(echo "$listener" | jq -r ".ListenerArn")

    echo "Listener: ${listener_arn}"

    # Get old certificate
    old_cert_arn=$(echo "$listener" | jq -r ".Certificates[].CertificateArn")
    old_cert_name=$(aws iam list-server-certificates | jq -r ".ServerCertificateMetadataList[] | select (.Arn == \"${old_cert_arn}\") | .ServerCertificateName")

    echo "Old certificate: ${old_cert_arn}"

    sleep 30

    echo "Modify listener: ${listener_arn}"

    aws elbv2 modify-listener --listener-arn ${listener_arn} --certificates CertificateArn=${new_cert_arn}

    sleep 30

    echo "Delete old certificate: ${old_cert_name}"

    aws iam delete-server-certificate --server-certificate-name "${old_cert_name}"


    aws s3 sync /etc/ssl/${DOMAIN} s3://${S3_BUCKET_NAME}/letsencrypt/certificates/

    # This hook is called once for each certificate that has been
    # produced. Here you might, for instance, copy your new certificates
    # to service-specific locations and reload the service.
    #
    # Parameters:
    # - DOMAIN
    #   The primary domain name, i.e. the certificate common
    #   name (CN).
    # - KEYFILE
    #   The path of the file containing the private key.
    # - CERTFILE
    #   The path of the file containing the signed certificate.
    # - FULLCHAINFILE
    #   The path of the file containing the full certificate chain.
    # - CHAINFILE
    #   The path of the file containing the intermediate certificate(s).
}

function unchanged_cert {
    local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" FULLCHAINFILE="${4}" CHAINFILE="${5}"

    echo "unchanged_cert called: ${DOMAIN}, ${KEYFILE}, ${CERTFILE}, ${FULLCHAINFILE}, ${CHAINFILE}"

    # This hook is called once for each certificate that is still
    # valid and therefore wasn't reissued.
    #
    # Parameters:
    # - DOMAIN
    #   The primary domain name, i.e. the certificate common
    #   name (CN).
    # - KEYFILE
    #   The path of the file containing the private key.
    # - CERTFILE
    #   The path of the file containing the signed certificate.
    # - FULLCHAINFILE
    #   The path of the file containing the full certificate chain.
    # - CHAINFILE
    #   The path of the file containing the intermediate certificate(s).
}

function invalid_challenge() {
    echo "invalid challenge"
}

function request_failure() {
    echo "request failed"
    # Wait for an hour
    sleep 3600
}

exit_hook() {
  # This hook is called at the end of a dehydrated command and can be used
  # to do some final (cleanup or other) tasks.

  :
}



HANDLER=$1; shift; $HANDLER "$@"
